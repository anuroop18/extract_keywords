[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nread_in_text\n\n read_in_text (file_path:str)\n\nRead in the text file\n\n\n\n\nType\nDetails\n\n\n\n\nfile_path\nstr\npath of text file\n\n\n\n\nsource\n\n\nis_word_in_range\n\n is_word_in_range (word:str, min_len:int, max_len:int)\n\nreturns True if word is in range (min_len, max_len) both inclusive\n\n\n\n\nType\nDetails\n\n\n\n\nword\nstr\ninput word\n\n\nmin_len\nint\nMin length of word\n\n\nmax_len\nint\nMax length of word\n\n\n\nExample usage of extract_keywords\n\nfrom functools import partial\n\n\nis_word_in_range = partial(is_word_in_range, min_len=4, max_len=16)\n\n\n# For single word\nis_word_in_range(\"Elephant\")\n\nTrue\n\n\n\nis_word_in_range(\"Elephant Rhinoceros Octopus\")\n\nFalse\n\n\n\n# For list of words\nwords = ['new moon', 'half moon', 'moon', 'lunar month', 'waxing crescent', 'distinct phases', 'crazy red moon in space']\n[is_word_in_range(word) for word in words]\n\n[True, True, True, True, True, True, False]\n\n\n\nsource\n\n\nremove_singular_words\n\n remove_singular_words (word_list:list)\n\nRemoves singular words when they have a corresponding plural word in a list of words.\n\n\n\n\nType\nDetails\n\n\n\n\nword_list\nlist\nList of words\n\n\n\nExample showing how to remove singular words if both singular and plural is present in list\n\nword_list = ['cat', 'dog', 'cats', 'apples', 'apple']\nresult = remove_singular_words(word_list)\nprint(result)  # Output: ['dog', 'apples']\n\n['dog', 'cats', 'apples']\n\n\n\nsource\n\n\nword_contains_numbers\n\n word_contains_numbers (word:str)\n\nreturns True if word contains numbers, False otherwise.\n\n\n\n\nType\nDetails\n\n\n\n\nword\nstr\ninput word\n\n\n\nExample use of word_contains_numbers function\n\nword = \"Hello123\"\nword_contains_numbers(word)\n\nTrue\n\n\n\nmixed_list = [\"apple\", \"banana\", \"cherry\", \"grape\", \"watermelon\", \"2% milk\", \"orange juice\", \"3 eggs\", \"strawberry jam\", \"4 potatoes\"]\n[word for word in mixed_list if not word_contains_numbers(word)]\n\n['apple',\n 'banana',\n 'cherry',\n 'grape',\n 'watermelon',\n 'orange juice',\n 'strawberry jam']\n\n\n\nsource\n\n\nremove_duplicates_preserve_order\n\n remove_duplicates_preserve_order (input_list:list)\n\nremoves duplicate items from a list while preserving order\n\n# Example usage:\nmy_list = [3, 2, 1, 2, 3, 4, 5, 4, 6, 'apple', 'fruit', 'apple', 'banana']\nremove_duplicates_preserve_order(my_list)\n\n[3, 2, 1, 4, 5, 6, 'apple', 'fruit', 'banana']\n\n\n\nsource\n\n\nsplit_compound_words\n\n split_compound_words (input_list:list)\n\nreturns a new list made after splitting all the compound words, removing duplicate items. Preserves order.\n\n\n\n\nType\nDetails\n\n\n\n\ninput_list\nlist\nlist of words\n\n\n\n\n# Example usage:\nmixed_list = [\"apple\", \"banana\", \"2% milk\", \"orange juice\", \"strawberry jam\", \"4 potatoes\", \"internet\", \"speedy internet\", \"byke jam\"]\nsplit_compound_words(mixed_list)\n\n['apple',\n 'banana',\n '2%',\n 'milk',\n 'orange',\n 'juice',\n 'strawberry',\n 'jam',\n '4',\n 'potatoes',\n 'internet',\n 'speedy',\n 'byke']\n\n\n\nsource\n\n\ncontains_only_alphabets\n\n contains_only_alphabets (input_string:str)\n\nreturns False if string contains anything other than alphabets\n\nresult = contains_only_alphabets(\"Paranã¡\")\nprint(result)  # Output: True\n\nresult = contains_only_alphabets(\"Hello123\")\nprint(result)  # Output: False\n\nresult = contains_only_alphabets(\"Hello 123!\")\nprint(result)  # Output: False\n\nFalse\nFalse\nFalse\n\n\n\nsource\n\n\ngenerate_keywords\n\n generate_keywords (text:str, max_len:int, n:int=10, min_len:int=3,\n                    compound_words=True, only_alphabets=True)\n\nExtract n keywords from text in range (min_len, max_len) both inclusive. if only_alphabets is True, compound_words is False\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntext\nstr\n\ninput text\n\n\nmax_len\nint\n\nmaximum length of word\n\n\nn\nint\n10\nnumber of keywords\n\n\nmin_len\nint\n3\nminimum length of word\n\n\ncompound_words\nbool\nTrue\ninclude combination of words\n\n\nonly_alphabets\nbool\nTrue\ninclude those keywords that contain alphabets only\n\n\n\nSample text for extracting keywords\n\ntext = \"In the 21st century, technology has rapidly advanced, bringing about significant changes in various industries. The digital revolution has led to the creation of smartphones, which have become an integral part of our daily lives. These devices offer a wide range of capabilities, from high-resolution cameras to powerful processors. Additionally, the internet has connected billions of people worldwide, enabling instant communication and access to a vast repository of information. Data analytics, driven by algorithms and machine learning, has revolutionized decision-making processes in business and science. With the advent of 5G technology, internet speeds have soared, paving the way for innovations like autonomous vehicles and the Internet of Things (IoT). As we continue into the 21st century, these technological advancements will shape our future in ways we can only begin to imagine.\"\n\n\n# include keywords that has numbers\ngenerate_keywords(text=text, n=10, min_len=4, max_len=15, only_alphabets=True)\n\n['smartphones',\n 'internet',\n 'speeds',\n 'digital',\n 'revolution',\n 'machine',\n 'learning',\n 'data',\n 'analytics',\n 'technological']\n\n\n\n# don't include keywords that has numbers\ngenerate_keywords(text=text, n=10, min_len=4, max_len=15, only_alphabets=False)\n\n['smartphones',\n 'internet speeds',\n 'internet',\n 'data analytics',\n 'devices',\n 'technology',\n '21st century',\n 'information',\n 'future',\n 'algorithms']\n\n\n\n# don't include keywords that has numbers\ngenerate_keywords(text=text, n=10, min_len=4, max_len=15, only_alphabets=False, compound_words=False)\n\n['smartphones',\n 'internet',\n 'speeds',\n 'digital',\n 'revolution',\n 'machine',\n 'learning',\n 'data',\n 'analytics',\n 'technological']"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "extract_keywords",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "extract_keywords",
    "section": "Install",
    "text": "Install\npip install extract_keywords"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "extract_keywords",
    "section": "How to use",
    "text": "How to use\nSee the core docs"
  }
]